# coding: utf-8
import os
import asyncio
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("AVCleaningCY")

WELCOME_TEXT = (
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>AV Cleaning CY</b>!\n"
    "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–Ω–∏–Ω–≥ –Ω–∞ –ö–∏–ø—Ä–µ üèù\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
)

MENU = [
    ["üßΩ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"],
    ["üìã –ù–∞—à–∏ —É—Å–ª—É–≥–∏", "üìû –°–≤—è–∑–∞—Ç—å—Å—è"]
]

SERVICES_TEXT = (
    "<b>üìã –ù–∞—à–∏ —É—Å–ª—É–≥–∏</b>\n\n"
    "üè† <b>–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞</b> ‚Äî –≥–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–º–µ—â–µ–Ω–∏–π.\n"
    "üßπ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —É–±–æ—Ä–∫–∞</b> ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è —á–∏—Å—Ç–æ—Ç–∞.\n"
    "üè¢ <b>–£–±–æ—Ä–∫–∞ –æ—Ñ–∏—Å–∞</b> ‚Äî –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.\n"
    "ü™£ <b>–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞</b> ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –ø—ã–ª–∏.\n\n"
    "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —É–¥–æ–±–Ω—ã–µ –¥–∞—Ç—É/–∞–¥—Ä–µ—Å ‚Äî –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
)

CONTACT_TEXT = (
    "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n"
    "Telegram: @adrian_handsome\n"
    "Instagram: https://instagram.com/av.cleaning.cy"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = ReplyKeyboardMarkup(MENU, resize_keyboard=True)
    await update.message.reply_text(WELCOME_TEXT, reply_markup=kb, parse_mode=ParseMode.HTML)

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    kb = ReplyKeyboardMarkup(MENU, resize_keyboard=True)
    if text == "üìã –ù–∞—à–∏ —É—Å–ª—É–≥–∏":
        await update.message.reply_text(SERVICES_TEXT, parse_mode=ParseMode.HTML, reply_markup=kb)
    elif text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è":
        await update.message.reply_text(CONTACT_TEXT, parse_mode=ParseMode.HTML, reply_markup=kb)
    elif text == "üßΩ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è":
        await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=kb)
    else:
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.", reply_markup=kb)


async def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –≤ Render –∏–ª–∏ .env")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))

    log.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())